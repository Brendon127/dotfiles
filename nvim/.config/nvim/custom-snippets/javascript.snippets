#####################################################################
# Snippet Functions
#####################################################################

global !p
def convertBody(s):
	body = '($1 =>  {\n$2/* do stuff */\n}\n)'
	return body
def getWord(mtch):
	return mtch.split('.')[0] 
endglobal


#####################################################################
# General
#####################################################################
snippet if
if(${1:input}) {
	${2:/* do stuff */}
} $3
endsnippet

snippet ife
if(${1:input}) {
	${3:/* do stuff */}
} else {
	${2:/* do stuff */}
}
$4
endsnippet

snippet el
else {
	${1:/* do stuff */}
}
endsnippet

snippet eli
else if(${1:input}) {
	${2:/* do stuff */}
}
endsnippet

snippet ds "do stuff comment"
endsnippet

snippet cw "Console warn"
console.warn(${1:message});
endsnippet

snippet try "Try catch"
try {
	$0
} catch (error) {
	console.warn(error.message);
}
endsnippet



snippet '([a-zA-Z]+\.fe)' "For Each" r
`!p snip.rv = getWord(match.group(1))`.forEach(${1:item} => {
	${2:/* do stuff */ }
});
endsnippet

snippet '([a-zA-Z]+\.m)' "Map" r
`!p snip.rv = getWord(match.group(1))`.map(${1:item} => {
	${2:/* do stuff */ }
});
endsnippet

#####################################################################
# React Native 
#####################################################################
snippet rnc "React Native Component"
import React from 'react';
import { StyleSheet } from 'react-native';
import PropTypes from 'prop-types';

export default class ${1:Component} extends React.Component {
	static propTypes = {

	};
    render() {
		$2
		return null;
    }
}

const styles = StyleSheet.create({
});
endsnippet

snippet rncr "Create reducer"
import CreateAction from '../action-utilities/action-creator';

const reducerName = '${1:name}';

$2

const initialState = {
};

export const $1Selector = (reducers) => reducers.$1Reducer;

export default function $1Reducer(state = initialState, action) {
    switch (action.type) {
        default:
            return state;
    }
}
endsnippet

snippet rnca "Create action"
const ${1:actionName } = CreateAction(reducerName, '${1/([a-z]*)([A-Z][a-z]*)/\U$1_$2\E/g}');
export const $1Action = $1.action;

case $1.actionType:
	return {
		...state,
		${2: state}: action.payload
	};
	
endsnippet

snippet rncaa "Create action in actions.js"
export const ${1:actionName}Action = () => (dispatch) => {
	$2
};
endsnippet

snippet fp "Create action in actions.js"
($1) => {
	$2
}
endsnippet

# var ${1} = require('${1/(([a-z][A-Z])+)/\U_\E/g}');
snippet req
var ${1} = require('${1/([a-z]+)([A-Z][a-z]+)/\U$1_$2\E/g}');
endsnippet


snippet rncc "React Naitve Container"
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';

import ${1:ScreenName} from '${2:./path}';

import { ${3:actionName}  } from '../../reducers/${4:actionPath}';


export function mapStateToProps({ ${5:name}Reducer}) {
    return {
		${6:/*props*/}
	};
}

export function mapDispatchToProps(dispatch) {
    return bindActionCreators(
        {
			${7:/*function*/ }
		},
        dispatch
    );
}

export default connect(
    mapStateToProps,
    mapDispatchToProps
)($1);
endsnippet

snippet id "import default" b
import ${1:Module} from '${2:path}';
endsnippet

snippet ii "import" b
import {${1:Module}} from '${2:path}';
endsnippet

snippet rnpt "Proptypes"
import PropTypes from 'prop-types';
$1.propTypes = {

};
endsnippet


snippet af "arrow function" 
const $1 = ($2) => {
	$3
};
endsnippet

snippet rd "redux dipatch"
return (dispatch) => {
	$1
};
endsnippet

